// <auto-generated />
using System;
using LeaveManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeaveManagement.Migrations
{
    [DbContext(typeof(LeaveDbContext))]
    partial class LeaveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LeaveManagement.Domain.Models.Attendance", b =>
                {
                    b.Property<Guid>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClockIn")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClockInTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClockOut")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClockOutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<double>("WorkHours")
                        .HasColumnType("float");

                    b.HasKey("AttendanceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "$2a$12$Ks6Z3pOlqY2D2YsQnelEa.QcBQ8vO3hfbTrVdJ2hzUAgiITOSiZNG",
                            Role = "Manager"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "$2a$12$x9bx51R8hNIu9QKRxjoc4u.Rnb95i6XopRBvGZKmOh8Gos.MB8diq",
                            Role = "Manager"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            ManagerId = 1,
                            Password = "$2a$12$ZcMzFVHN2o8NeHt2kFie9O2XC3ifKvKKiIQID0Q9QF6dWb1XHXWAq",
                            Role = "Developer"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            ManagerId = 1,
                            Password = "$2a$12$Jlvk0ZipMyod0hWbHdwTj.a.LXAoSLHLYK8ks6cqRAP2x9B41QWD2",
                            Role = "DevOps Engineer"
                        },
                        new
                        {
                            EmployeeId = 5,
                            Email = "charlie.davis@example.com",
                            FirstName = "Charlie",
                            LastName = "Davis",
                            ManagerId = 1,
                            Password = "$2a$12$ocLkjPrgrsxpcZP5lSB9Yu55vjnuB6upLMjc8IE3DmwApPktgxf0q",
                            Role = "Maintenance Engineer"
                        },
                        new
                        {
                            EmployeeId = 6,
                            Email = "eve.wilson@example.com",
                            FirstName = "Eve",
                            LastName = "Wilson",
                            ManagerId = 2,
                            Password = "$2a$12$eKPVuVVDN.mF6yiJCI7rJ.xygoO2or.bVYmeD3MMiQDu1F5afkjUq",
                            Role = "Developer"
                        },
                        new
                        {
                            EmployeeId = 7,
                            Email = "alex.jones@example.com",
                            FirstName = "Alex",
                            LastName = "Jones",
                            ManagerId = 2,
                            Password = "$2a$12$YLUO7lCFz8/xsMgFCVR/J.TYXqL.YwYw/IFMXSO/4Ejbp7fRy1bkm",
                            Role = "Tester"
                        },
                        new
                        {
                            EmployeeId = 8,
                            Email = "maria.lopez@example.com",
                            FirstName = "Maria",
                            LastName = "Lopez",
                            ManagerId = 2,
                            Password = "$2a$12$ymo5uMDo/cUXDDj7yD6qDez5obz.gzuaklWRCHeJB6.Z3hHhWv2sy",
                            Role = "Maintenance Engineer"
                        },
                        new
                        {
                            EmployeeId = 9,
                            Email = "jack.lol@example.com",
                            FirstName = "Jack",
                            LastName = "Lol",
                            ManagerId = 2,
                            Password = "$2a$12$PpI5NzInKWfO3urdDcWHeO2.JogX5UWZGlC85Dyc7hgx/nE6wnpzG",
                            Role = "DevOps Engineer"
                        },
                        new
                        {
                            EmployeeId = 10,
                            Email = "elon.mask@example.com",
                            FirstName = "Elon",
                            LastName = "Mask",
                            ManagerId = 2,
                            Password = "$2a$12$iXteU/cK5cKZLYljSTM1We9D5ogfsnuvzxegm8sEA16zOm9vSApNO",
                            Role = "Network Engineer"
                        },
                        new
                        {
                            EmployeeId = 11,
                            Email = "jan.doe@example.com",
                            FirstName = "Jan",
                            LastName = "Doe",
                            ManagerId = 1,
                            Password = "$2a$10$vqkRzhNjtniw3CCpsoet8uxGXxWanZwek.LrKQCyAQLVvkIOkQJO2",
                            Role = "Tester"
                        });
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.HolidayCalendar", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Date");

                    b.ToTable("HolidayCalendars");

                    b.HasData(
                        new
                        {
                            Date = new DateOnly(2025, 1, 1),
                            Description = "New Year's Day",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 1, 14),
                            Description = "Pongal",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 1, 26),
                            Description = "Republic Day",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 3, 21),
                            Description = "Holi",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 4, 14),
                            Description = "Tamil New Year",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 5, 1),
                            Description = "Labour Day",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 8, 15),
                            Description = "Independence Day",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 9, 17),
                            Description = "Ganesh Chaturthi",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 10, 2),
                            Description = "Gandhi Jayanti",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 10, 22),
                            Description = "Dussehra",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 11, 4),
                            Description = "Diwali",
                            Year = 2025
                        },
                        new
                        {
                            Date = new DateOnly(2025, 12, 25),
                            Description = "Christmas",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.LeaveBalance", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Casual")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Medical")
                        .HasColumnType("int");

                    b.Property<int>("Sick")
                        .HasColumnType("int");

                    b.Property<int>("Vacation")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Year")
                        .HasColumnType("date");

                    b.HasKey("EmployeeId");

                    b.ToTable("LeaveBalances");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.LeaveRequest", b =>
                {
                    b.Property<Guid>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.HasKey("LeaveId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.ShiftSwapRequest", b =>
                {
                    b.Property<Guid>("ShiftRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangeShiftFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeShiftTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftRequestId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftSwapRequests");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.Shifts", b =>
                {
                    b.Property<Guid>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date");

                    b.Property<string>("ShiftTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShiftId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.Attendance", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Models.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.Employee", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.LeaveBalance", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Models.Employee", "Employee")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.LeaveRequest", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Models.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.ShiftSwapRequest", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Models.Employee", "Employee")
                        .WithMany("ShiftSwapRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeaveManagement.Domain.Models.Shifts", "Shift")
                        .WithMany("ShiftSwapRequests")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.Shifts", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Models.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("LeaveBalances");

                    b.Navigation("LeaveRequests");

                    b.Navigation("ShiftSwapRequests");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.Shifts", b =>
                {
                    b.Navigation("ShiftSwapRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
